#!usr/bin/python
# -*- coding: utf-8 -*-

__author__="Coronado Gozain Saine, Hernandez Cuecuecha Jorge Alberto"
__copyright__="Copyright 2017, UNAM-CERT"
__license__="UNAM CERT"
__version__="1.0"
__status__="Prototype"

import re
import files
import sqlite3
import generateHtml


vulnes = {}

class file_vulnerability:
        pass

def get_vulnerability (option):
        relist=[]
	cont=[]
	fv=[]
	fvfiv=[]
	vul=[]
	tablev=[]
        vulx = " "
        global vulnes
        lnum = 0
        fileslist=files.get_listfiles() #it gets list of the paths
        expression=[]
        connection= sqlite3.connect("/opt/mrphpanalyzer/base/Fraudatanalyzer.db")
        cursor= connection.cursor()
        for e in cursor.execute("SELECT  expression FROM vulnerabilities WHERE name = '%s'" %option): #it gets regular expression  and it adds it into list "expression"  
        	c=list(e)
                expression.append(c[0])
	for x in range(len(expression)):
		e= re.compile(expression[x],re.I) 
		relist.append(e) # it adds objects of the operation re.compile into list relist 
	for file in fileslist:
                with open(file,"r") as f:
                	for num, line in enumerate(f,1):
                        	line = line.strip()
                                if re.match(r'^\s*$', line): continue #If line is empty, continue with the next one
                                if line[0] == '#': continue
				if re.search(r'<.*?>',line): continue
                                if re.match(r'^(\/\*(\s*|.*?))|((\s*|.*?)\*\/)|(\/\/.*)$',line): continue
                                for r in range(len(relist)):
                                	if relist[r].search(line): #if regular expression maches with line, it adds expression, line and file into diferent lists
                                                lnum = lnum+1						
						fv.append(line+"/n.n"+file)
        	                                tablev.append(relist[r].pattern)
                                                vulx += '<tr>\n'
                                                vulx += '<td>'+str(num)+'</td>\n'   
                                                vulx += '<td>'+file+'</td>\n'   
                                                vulx += '<td>'+line+'</td>\n</tr>'    
        vulnes[option]=lnum #it saves every value of each vulnerability
        tvul = ""
        tvul+='<div class="row">\n'
        tvul+='  <div class="col-xl-5 col-sm-6 mb-3">\n'
        tvul+='    <div class="card text-white sqli o-hidden h-100" id="'+option+'" onclick="id'+option+'()">\n'
        tvul+='       <div class="card-body">\n'
        tvul+='          <div class="row">\n'
        tvul+='              <div class="col-md-4">\n'
        tvul+='                 <h2 style="text-align:center;">'+str(lnum)+'</h2>\n'
        tvul+='              </div>\n'
        tvul+='          <div class="col-md-8">\n'
        if option=="1":
            tvul+='         <h2>SQLi</h2>\n'
        elif option=="2":
            tvul+='         <h2>XSS</h2>\n'
        elif option=="3":
            tvul+='         <h2>SC</h2>\n'
        elif option=="4":
            tvul+='         <h2>Send Info</h2>\n'
        elif option=="5":
            tvul+='         <h2>LFI&RFI</h2>\n'
        elif option=="6":
            tvul+='         <h2>Path Traversal</h2>\n'
        elif option=="7":
            tvul+='         <h2>Command Injection</h2>\n'                                                
        tvul+='          </div>\n'
        tvul+='        </dvi>\n'
        tvul+='     </div>\n'
        tvul+='  </div>\n'
        tvul+='</div>\n'
        tvul+='</div>\n'
        tvul+='</div>\n'
        generateHtml.cardhtml(tvul, generateHtml.creareporte()) #create card for each vulnebility
        generateHtml.tablehtml(vulx,generateHtml.creareporte(), option) #create table for each vulnebility
        generateHtml.scriptable(str(option), generateHtml.creareporte()) #create script for each table vulnebility
        generateHtml.scriptsearchtable(option) #create script for each table vulnebility option search
        if len(vulnes) > 2:
            generateHtml.jsgraphic(vulnes)
	for lf in range(len(fv)): #it pulls apart elements from list in [[line, file],[line,file]]
        	h=fv[lf].split("/n.n")
               	vul.append(h)
	for g in range(len(vul)): #every expression adds to its corresponding element from list "vul" 
               	vul[g].append(tablev[g])
	return vul #finally: [[line,file,expression],[line,file,expression],...[line,file,expression]]


