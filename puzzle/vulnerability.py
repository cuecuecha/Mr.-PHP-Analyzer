#!usr/bin/python
# -*- coding: utf-8 -*-

__author__="Coronado Gozain Saine, Hernandez Cuecuecha Jorge Alberto"
__copyright__="Copyright 2017, UNAM-CERT"
__license__="UNAM CERT"
__version__="1.0"
__status__="Prototype"

import re
import files
import sqlite3
import generateHtml


vulnes = {}

class file_vulnerability:
        pass
 
def get_xss(line, file, express):
	expression=[]
	com=[]
	exr=[]
	ifg=[]
	ifge=[]
	ifm=[]
	extes=[]
	fi=0
	er=0
	eci=0
	numid=0
	hk=0
	filter=0
	connection= sqlite3.connect("/opt/mrphpanalyzer/base/Fraudatanalyzer.db")
	connection.text_factory=str
        cursor= connection.cursor()
        for e in cursor.execute("SELECT  expression FROM vulnerabilities WHERE name = '9'"): #it gets regular expression  and it adds it int
                c=list(e)
                expression.append(c[0])
	kl=line.split(" ")
	for ex in range(len(expression)):
		f=open(file,'r')
		sif = re.findall(expression[ex], f.read())
		if ex is 0:
			if sif:
				for tuple in sif:
                        		com.append(tuple[0])
		if ex is 1:
			if sif:
				for tuple in sif:
    					exr.append(tuple[0])
		if ex is 2:
			if sif:
				with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[2],line):
							ec=line.split(" ")
							if "echo" in ec:
								eci=ec.index("echo")
							#print ec
							#print eci
								numid=num
							for ind, he in enumerate(ec,0):
								if re.match(expression[5],he):
									#print eci
									#print ind
									#print he
									kh=he.split(";")
									hk=kh[0]
									if eci < ind:
										f=open(file,'r')
										gt = re.findall(expression[4], f.read())
										if gt:
											for gh in range(len(gt)):
												j=list(gt[gh])
												ge=j[0].split(" ")
												lg=len(ge)
												jg=ge[lg-1].split(")")
												#print gt
												#print ge
												#print jg[0]
												#print hk
												if hk == jg[0]:continue
										else:
											print "esto no es un falso positivo"
											filter=19	
		if ex is 3:
			if sif:
				extes.append(sif)
		if ex is 4:
			if sif and extes:
				with open(file,"r") as f:
                			for num, line in enumerate(f,1):
                        			if re.match(expression[4],line):
							fi=num
							vf=line.split(" ")
						if re.match(expression[3],line):
							er=num
			if er == (fi+1):
				f=open(file,'r')
                                gt = re.findall(expression[2], f.read())
                                if gt:
                                	for gh in range(len(gt)):
                                        	j=list(gt[gh])
                                                ge=j[1].split(" ")
                                                #lg=len(ge)
                                                #jg=ge[lg-1].split("")
                                                #print gt
                                                #print ge[1]
                                                #print jg[0]
                                                #print sif
					for si in range(len(sif)):
						fs=list(sif[si])
						ifs=fs[0].split(" ")
						lg=len(ge)
                                                jg=ge[lg-1].split(" ")
						#print jg[0]
                                                if jg[0] == ge[1]: continue
                                else:
                                                                                        
					print "posible vulnerabilidad por mal uso de filtros"
					filter=19
				 
	if com and exr:
		if len(exr) is (2*(len(com))):
			for fex in range(len(exr)):		
				if exr[fex] == com[(fex/2)]:
					ifg.append(exr[fex])
		ifge=list(set(ifg))
		for h in range(len(ifge)):
			ql=ifge[h].split(" ")
			if kl[0] == ql[0]:
				print "muy pero muy posible vulnerabilidad"
				filter=19
	print numid
 			               
 	print file
	return filter
def get_ci(line, file, express):
        expression=[]
        filter=0
        vra=[]
        var=0
        parvar=[]
        iee=0
        ja=0
        sein=0
        luge=[]
        wahr=[]
        zeit=[]
        feuer=[]
        flag=0
        seele=0
        wasser=[]
        luft=[]
        connection= sqlite3.connect("/opt/mrphpanalyzer/base/Fraudatanalyzer.db")
        connection.text_factory=str
        cursor= connection.cursor()
        for e in cursor.execute("SELECT  expression FROM vulnerabilities WHERE name = '10'"): #it gets regular expression  and it adds it int
                c=list(e)
                expression.append(c[0])
        for ex in range(len(expression)):
                f=open(file,'r')
                sif = re.findall(expression[ex], f.read())
                print sif
		
		if ex is 0:
                        if sif:
                                if re.match(expression[0],line):
                                        print "posible vulnerabilidad"
                                        print line
                                        var=line.split(" ")
                                        for v in range(len(var)):
                                                rav=var[v].split(".")
                                                for a in range(len(rav)):
                                                        arv=rav[a].split(")")
                                                        for r in range(len(arv)):
                                                                if re.match(expression[0],arv[r]):
                                                                        vra.append(arv[r])   #parametro de las funciones vulnerables (get o post)
                if ex is 1:
                        if sif:
                                if re.match(expression[1],line):
                                        print "posibleee vulnerabilidad"
                                        print line
                                        was=line.split(".")
                                        for w in range(len(was)):
                                                saw=was[w].split(")")
                                                for a in range(len(saw)):
                                                        if re.match(expression[1],saw[a]):
                                                                vra.append(saw[a])   #parametro de las funciones *variable
					aw=line.split("(")
                                        for w in range(len(aw)):
                                                raw=aw[w].split(")")
                                                for r in range(len(raw)):
                                                        if re.match(expression[1],raw[r]):
                                                                vra.append(raw[r])
                luge=list(set(vra)) 
                if ex is 2:
                        if sif:
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[2],line):
                                                        print "se encontro la variable"
                                                        ec=line.split(" ")
                                                        for ce in range(len(ec)):
                                                                ic=ec[ce].split("$")
                                                                for c in range(len(ic)):
                                                                        if re.match('[a-zA-Z0-9]+', ic[c]):
                                                                                var="$"+ic[c]
                                                                                print vra
                                                                                for av in range(len(luge)):
                                                                                        if var == luge[av]: #variables iguales algunos de los metodos (get o post)
                                                                                                parvar.append(var)
                                                                                                print var
                                                                                                print line
                                                                print ic
                wahr=list(set(parvar))
		if ex is 3:
                        if sif:
                                flag=1
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[3],line):
                                                        print "la expresion regular esta mal"
                                                        first=line.split(" ")
                                                        for o in range(len(first)):
                                                                prem=first[o].split(",")
                                                                for d in range(len(prem)):
                                                                        ise=prem[d].split("$")
                                                                        for a in range(len(ise)):
                                                                                if re.match('[a-zA-Z0-9]+', ise[a]):
                                                                                        nan="$"+ise[a]
                                                                                        ei=nan.split(")")
                                                                                        print ei[0]
                                                                                        for fer in range(len(wahr)):
                                                                                                if ei[0] == wahr[fer]:
                                                                                                        print "la funcion vulnerable tiene una variable 19"
                                                                                                        filter=19
										if re.match('_(GET|POST)', ise[a]):
                                                                                        omo="$"+ise[a]
                                                                                        ar=omo.split(")")
                                                                                        print ar[0]
                                                                                        for nas in range(len(luge)):
                                                                                                if ar[0] == luge[nas]: 
                                                                                                        print "la funcion vulnerable get o post, 19"
                                                                                                        filter=19

                if ex is 4:
                        if sif:
                                flag=1
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[4],line):
                                                        print "la expresion regular esta bien"
                                                        iee=num
                                                        second=line.split(" ")
                                                        for g in range(len(second)):
                                                                prem=second[g].split(",")
                                                                for n in range(len(prem)):
                                                                        if re.match('^\$.*', prem[n]):
										ise=prem[n].split("$")
                                                                                for z in range(len(ise)):
                                                                                        if re.match('[a-zA-Z0-9]+', ise[z]):
                                                                                                kon="$"+ise[z]
                                                                                                nte=kon.split(")")
                                                                                                print nte[0]
                                                                                                for ei in range(len(wahr)):
                                                                                                        if ist[0] == wahr[ei]:
                                                                                                                print "la funcion vulnerable tiene una variable"
                                                                                                                with open(file,"r") as f:
                                                                                                                        for num, line in enumerate(f,1):
                                                                                                                                if re.match(expression[5],line):
                                                                                                                                        ja=num
                                                                                                                                        if iee < ja:
                                                                                                                                                print "no hay vulnerabilidad"
                                                                                                                                                filter=11
                                                                                                        else: continue
											elif re.match('_(GET|POST)', ise[z]):
                                                                                                ne="$"+ise[z]
                                                                                                lu=ne.split(")")
                                                                                                print lu[0]
                                                                                                for ge in range(len(luge)):
                                                                                                        if lu[0] == luge[ge]:
                                                                                                                print len(luge)
                                                                                                                print lu[0] 
                                                                                                                print "la funcion vulnerable get o post"   
                                                                                                                with open(file,"r") as f:
                                                                                                                        for num, line in enumerate(f,1):
                                                                                                                                if re.match(expression[5],line):
                                                                                                                                        sein=num
                                                                                                                                        if iee < sein:  
                                                                                                                                                print "no hay vulnerabilidad get"
                                                                                                                                                filter=11
                                                                                                        else: continue
                                                                                        else: continue
                                                                        else: continue
		if ex is 5:
                        if sif:
                                if filter != 11 and flag is 1:
                                        print "se tiene mal uso de la funcion"
                        else:
                                if flag is 1:
                                        print "es vulnerable la funcion porque no escapa"
                                        filter=19
                if ex is 6:
                        if sif: 
                                flag=1
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[6],line):
                                                        print "se tiene algun tipo de filtro"
                                                        zeit=num
                                                        for sch in range(len(luge)):
                                                                if re.match("^\$.*",luge[sch]):
                                                                        see=luge[sch].split("$")
                                                                        wasser=list(set(see))
                                                                        if len(wasser) > 1:
                                                                                luft=wasser[1].split("'")
                                                                                for ne in range(len(wasser)):
                                                                                        wind=wasser[ne].split(" ")
                                                                                        print wind
                                                                                        liebe=wind[0].split("(")
                                                                                        if re.match(".*?\$"+liebe[0]+".*?",line):
                                                                                                feuer=num
                                                                                                print line
                                                                                                if zeit==feuer:
                                                                                                        print "vulnerabilidad no encotrada"
													filter=11
                                                                        if len(luft) > 2:
                                                                                print luft[1]
                                                                                boden="'"+luft[1]
                                                                                if re.match(".*?\$_(GET|POST)\["+boden+"\'\].*?",line):
                                                                                        feuer=num
                                                                                        print line
                                                                                        if zeit==feuer:
                                                                                                print "vulnerabilidad no encotradaa"
                                                                                                filter=11



                                                        for merz in range(len(wahr)):
                                                                 if re.match("^\$.*",wahr[merz]):
                                                                        le=wahr[merz].split("$")
                                                                        if re.match(".*?\$"+le[1]+".*?",line):
                                                                                print line
                                                                                seele=num
                                                                                if zeit==seele:
                                                                                        print "vulnerabilidad no encotradaaa"
                                                                                        filter=11
	if flag != 1 and len(vra) > 0:
                print "100% vulnerable"
                filter=19       
        print vra
        print file
        print line
        return filter
def get_ifc(line, file, express):
        expression=[]
        filter=0
        brille=[]
        grun=0
        metall=[]
        spielen=[]
        ideen=[]
        zeit=[]
        feuer=[]
        flag=0
        seele=0
        wasser=[]
        luft=[]
	connection= sqlite3.connect("/opt/mrphpanalyzer/base/Fraudatanalyzer.db")
        connection.text_factory=str
        cursor= connection.cursor()
        for e in cursor.execute("SELECT  expression FROM vulnerabilities WHERE name = '11'"): #it gets regular expression  and it adds it int
                c=list(e)
                expression.append(c[0])
        for ex in range(len(expression)):
                f=open(file,'r')
                sif = re.findall(expression[ex], f.read())
                print sif

                if ex is 0:
                        if sif:
                                if re.match(expression[0],line):
                                        print "posible vulnerabilidad"
                                        print line
                                        grun=line.split(" ")
                                        for v in range(len(grun)):
                                                rav=grun[v].split(".")
                                                for a in range(len(rav)):
                                                        arv=rav[a].split(")")
                                                        for r in range(len(arv)):
                                                                if re.match(expression[0],arv[r]):
									brille.append(arv[r])   #parametro de las funciones vulnerables (get o post)
                if ex is 1:
                        if sif:
                                if re.match(expression[1],line):
                                        print "posibleee vulnerabilidad"
                                        print line
                                        was=line.split(".")
                                        for w in range(len(was)):
                                                saw=was[w].split(")")
                                                for a in range(len(saw)):
                                                        if re.match(expression[1],saw[a]):
                                                                brille.append(saw[a])   #parametro de las funciones *variable
                                        aw=line.split("(")
                                        for w in range(len(aw)):
                                                raw=aw[w].split(")")
                                                for r in range(len(raw)):
                                                        if re.match(expression[1],raw[r]):
                                                                brille.append(raw[r])
                spielen=list(set(brille)) 
		if ex is 2:
                        if sif:
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[2],line):
                                                        print "se encontro la variable"
                                                        ec=line.split(" ")
                                                        for ce in range(len(ec)):
                                                                ic=ec[ce].split("$")
                                                                for c in range(len(ic)):
                                                                        if re.match('[a-zA-Z0-9]+', ic[c]):
                                                                                grun="$"+ic[c]
                                                                                print brille
                                                                                for av in range(len(spielen)):
                                                                                        if grun == spielen[av]: #variables iguales algunos de los metodos (get o post)
                                                                                                metall.append(grun)
                                                                                                print grun
                                                                                                print line
                                                                print ic
                ideen=list(set(metall))
		if ex is 3:
                        if sif: 
                                flag=1
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[3],line):
                                                        print "se tiene algun tipo de filtro"
                                                        zeit=num
                                                        for sch in range(len(spielen)):
                                                                if re.match("^\$.*",spielen[sch]):
                                                                        see=spielen[sch].split("$")
                                                                        wasser=list(set(see))
                                                                        if len(wasser) > 1:
                                                                                luft=wasser[1].split("'")
                                                                                for ne in range(len(wasser)):
                                                                                        wind=wasser[ne].split(" ")
                                                                                        print wind
                                                                                        liebe=wind[0].split("(")
                                                                                        if re.match(".*?\$"+liebe[0]+".*?",line):
                                                                                                feuer=num
                                                                                                print line
                                                                                                if zeit==feuer:
                                                                                                        print "vulnerabilidad no encotrada"
                                                                                                        filter=11
                                                                        if len(luft) > 2:
										print luft[1]
                                                                                boden="'"+luft[1]
                                                                                if re.match(".*?\$_(GET|POST)\["+boden+"\'\].*?",line):
                                                                                        feuer=num
                                                                                        print line
                                                                                        if zeit==feuer:
                                                                                                print "vulnerabilidad no encotradaa"
                                                                                                filter=11



                                                        for merz in range(len(ideen)):
                                                                 if re.match("^\$.*",ideen[merz]):
                                                                        le=ideen[merz].split("$")
                                                                        if re.match(".*?\$"+le[1]+".*?",line):
                                                                                print line
                                                                                seele=num
                                                                                if zeit==seele:
                                                                                        print "vulnerabilidad no encotradaaa"
                                                                                        filter=11
        if flag != 1 and len(brille) > 0:
                print "100% vulnerable"
                filter=19       
        print brille
	print file
        print line
        return filter

def get_sc(line, file, express):
        expression=[]
        filter=0
        hier=[]
        brille=[]
        grun=0
        metall=[]
        spielen=[]
        ideen=[]
        flag=0
        luft=[]
        suchen=[]
        ist=0
        noch=0
        nicht=0
        dir=0
        bald=0
        mir=0
	mit=0
        mire=0
        blau=0
	odn=[]
        connection= sqlite3.connect("/opt/mrphpanalyzer/base/Fraudatanalyzer.db")
        connection.text_factory=str
        cursor= connection.cursor()
        for e in cursor.execute("SELECT  expression FROM vulnerabilities WHERE name = '12'"): #it gets regular expression  and it adds it int
                c=list(e)
                expression.append(c[0])
        for ex in range(len(expression)):
                f=open(file,'r')
                sif = re.findall(expression[ex], f.read())
                print sif
                heute=line.split("setcookie")
		if len(heute) > 2:
                	hier=heute[1].split(",")
                	print hier
                #para el parametro de valor de la cookie
                if ex is 0:
                        if sif:
				if len(hier) > 1:
                                	if re.match(expression[0],hier[1]): #parametro get o post
                                        	print "posible vulnerabilidad"
						print hier[1]
                                        	if re.match(".*htmlentities(\s)*\(.*\).*",hier[1]):
                                                	nicht=11
                                        	else: 
                                                	filter=9
                                                	print "es muy probable que sea vulnerable"
                if ex is 1:
                        if sif:
				if len(hier) > 1:
                                	if re.match(expression[1],hier[1]): #parametro *variable
                                        	print "posibleee vulnerabilidad"
                                        	was=hier[1].split(".")
                                        	for w in range(len(was)):
                                                	rausch=was[w].split("(")
                                                	for e in range(len(rausch)):
                                                        	saft=rausch[e].split(")")
                                                        	for n in range(len(saft)):
                                                                	saw=saft[n].split(" ")
                                                                	for a in range(len(saw)):
                                                                        	if re.match(expression[1],saw[a]):
                                                                                	brille.append(saw[a])   #parametro de las funciones *variable
                                                                                	if re.match(".*serialize(\s)*\(.*\).*",hier[1]):
                                                                                        	filter=19
                                                                                	if re.match(".*htmlentities(\s)*\(.*\).*",hier[1]):
												nicht=11

                spielen=list(set(brille)) 
                if ex is 2:
                        if sif:
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[2],line):
                                                        print "se encontro la variable"
                                                        ec=line.split(" ")
                                                        for ce in range(len(ec)):
                                                                ic=ec[ce].split("$")
                                                                for c in range(len(ic)):
                                                                        if re.match('[a-zA-Z0-9]+', ic[c]):
                                                                                grun="$"+ic[c]
                                                                                for av in range(len(spielen)):
                                                                                        if grun == spielen[av]: #variables iguales algunos de los metodos (get o post)
                                                                                                metall.append(grun)
                                                                                                if re.match(".*serialize(\s)*\(.*\).*",line):
                                                                                                        filter=19
                                                                                                if re.match(".*htmlentities(\s)*\(.*\).*",line):
													nicht=11
                ideen=list(set(metall))
                if ex is 3:
                        if sif:
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[3],line):
                                                        bar=line.split("=")
                                                        wissen=bar[0].split("$")
                                                        if re.match('[a-zA-Z0-9]+', wissen[1]):
                                                                lust="$"+wissen[1]
                                                                suchen.append(lust)
                                                        gruss=line.split(".")
                                                        for h in range(len(gruss)):
                                                                uhr=bar[h].split("$")
                                                                for i in range(len(uhr)):
                                                                        if re.match('[a-zA-Z0-9]+', uhr[i]):
                                                                                keine="$"+uhr[i]
                                                                                suchen.append(keine)
                                                if re.match(expression[3],hier[1]):
                                                        print "la funcion se encuentra como parametro"
							flag=1
                                        for k in range(len(suchen)):
                                                for e in range(len(ideen)):
                                                        if suchen[k] == ideen[e]: #la salt es aleatoria
                                                                flag=1
                                                                print suchen[k]
                                                                print ideen[e]
                if ex is 4:
                        if sif:
                                with open(file,"r") as f:
                                        for num, line in enumerate(f,1):
                                                if re.match(expression[4],line):
                                                        schone=line.split("=")
                                                        erf=schone[0].split("$")
                                                        print erf[1]
                                                        if re.match('[a-zA-Z0-9]+', erf[1]):
                                                                ist="$"+erf[1]
						if len(hier) > 1:
                                                	if re.match(expression[4],hier[1]):
                                                        	schone=line.split(".")
                                                        	if len(schone) > 1:
									print "la funcion esta dendro del parametro y este parametro tiene salt"
                                                                	filter=11
                                                        	if len(schone) == 1:
                                                                	asc=schone[0].split("$")
                                                                	if len(asc) > 1:
                                                                        	if re.match('[a-zA-Z0-9]+', asc[1]):
                                                                                	print "se trata de una variable"
                                                                                	flag = 2
                                                                                	print asc[1]
                                                                        	elif re.match('_(GET|POST)', asc[1]):
                                                                                	print "se trata de un metodo, por lo tanto es inseguro"
                                                                                	print asc[1]
                                                                                	filter=19
                                                                	else:
                                                                        	print "se trata de una constante"
                                                                        	filter=19
        with open(file,"r") as f:
                for num, line in enumerate(f,1):
                        for ong in range(len(spielen)):
                                if (re.match(spielen[ong]+"=.*",line)) and flag == 2:
                                        print spielen[ong]
                                        schone=line.split(".")
                                        if len(schone) > 1:
						noch=1
                                                print "Se tieeenee una salt"
        for gz in range(len(ideen)):
                if ist == ideen[gz] and flag != 1 and noch != 1:
                        print "No se tiene una sal y se tiene funcion vulnerable"
                        filter=19
                if ist == ideen[gz] and flag != 1 and noch == 1:
                        print "se tiene salt pero no es aleatoria"
                        filter=11
	if len(hier) > 1:
        	odn=hier[1].split('"')
        if len(odn) > 2:
                print odn
                print "el valor de la cookie es constante" 
                filter=19
        #para el resto de los parametros
        if len(hier) < 7 and len(hier) != 3 and len(hier) != 2:
                print "requiere de mas parametros para que sea segura"
                filter=19
        if len(hier) == 7:
                mit=hier[6].split(")")
                kino=hier[5].split(" ")
                if len(kino) == 2:
                        blau=1
                if len(kino) == 1: 
			blau=0
                if (kino[blau] == "true" or kino[blau] == 1) and (mit[0] == "true" or mit[0] == 1):
                        print"la configuracion esta perfecta"
                        filter=11
                elif (kino[blau] == "true" or kino[blau] == 1) and (mit[0] == "false" or mit[0] == 0 or mit[0] == "NULL") and nicht == 11:
                        print"la configuracion esta relativamente bien"
                        filter=11
                elif (kino[blau] == "true" or kino[blau] == 1) and (mit[0] == "false" or mit[0] == 0 or mit[0] != "NULL") and nicht != 11:
                        print"la configuracion es vulnerable"
                        filter=19
                elif (kino[blau] == "false" or kino[blau] == 0 or kino[blau] == "NULL") and (mit[0] == "true" or mit[0] == 1):
                        print"es vulnerable la configuracion"
                        filter=19
                elif (kino[blau] == "false" or kino[blau] == 0 or kino[blau] == "NULL") and (mit[0] == "false" or mit[0] == 0 or mit[0] == "NULL") and nicht != 11:
                        print"es vulnerable la configuracion"
                        filter=19
                elif (kino[blau] == "false" or kino[blau] == 0 or kino[blau] == "NULL") and (mit[0] == "false" or mit[0] == 0 or mit[0] == "NULL") and nicht == 11:
                        print"la configuracion esta vulnerable"
                        filter=19
        #para la eliminacion:
	with open(file,"r") as f:
                for num, line in enumerate(f,1):
                        if re.match("setcookie",line):
                                heute=line.split("setcookie")
                                hier=heute[1].split(",")
                                if len(hier) == 3:
                                        herz=hier[2].split(")")
                                        mir=hier[0].split("(")
                                        mit=herz[0].split(" ")
                                        if len(mit) == 2:
                                                gelb=1
                                        if len(mit) == 1: 
                                                gelb=0
                                        dir=num
                                        print mit[gelb]
                                        if mit[gelb] == "1":
                                                print "esto va por buen camino"
                                                filter=11
                                        elif mit[gelb] != "1":
                                                print "para garantizar que caduque la cookie este parametro debe ser igual a 1" 
                                                filter=19
                                if len(hier) == 2:
					herz=hier[1].split(")")
                                        mire=hier[0].split("(")
                                        mit=herz[0].split(" ")
                                        if len(mit) == 2:
                                                gelb=1
                                        if len(mit) == 1: 
                                                gelb=0
                                        bald=num
                                        if mit[gelb] == "false" and (dir+1) == bald:
                                                print "esto va por buen camino"
                                                filter=11
                                        if mit[gelb] == "false" and (dir+1) != bald:
                                                print "no esta la secuencia para la eliminacion de la cookie"
                                                filter=19
                                        elif mit[gelb] != "false":
                                                print "eliminacion estandar este parametro debe ser igual a false"
                                                filter=19
                        if re.match("unset",line):
                                suza=line.split("[")
                                mmen=suza[1].split("]")
                                immer=num
                                if mmen[0] == mire[1] and mire[1] == mir[1] and (bald+1) == immer:
                                        print "se realiza la eliminacion correctamente" 
					filter=11
                                elif mmen[0] != mire[1] and mire[1] == mir[1] and (bald+1) == immer:
                                        print " no se realiza la eliminacion correctamente" 
                                        filter=19
                                elif mmen[0] == mire[1] and mire[1] != mir[1] and (bald+1) == immer:
                                        print " no000 se realiza la eliminacion correctamente"
                                        filter=19
                                elif mmen[0] == mire[1] and mire[1] == mir[1] and (bald+1) != immer:
                                        print " no0000.000 se realiza la eliminacion correctamente" 
                                        filter=19
        print file
        return filter

def get_send(line, file, express):
        filter=0
        hier=[]
        flag=0
        ist=0
        nie=0
        tag=0
	natur=line.split(".")
        print len(natur)
        if len(natur) > 2:
                for si in range(len(natur)):
                        tanzen=natur[si].split("$")
                        for no in range(len(tanzen)):
                                if re.match('[a-zA-Z0-9]+', tanzen[no]):
                                        ist="$"+tanzen[no]
                                        hier.append(ist)
                                        flag=1
                                elif re.match('_(GET|POST)\[.*\]', tanzen[no]):
                                        nie="$"+tanzen[no]
                                        print "se trata de un metodo, por lo tanto es inseguro"
                                        print nie
                                elif re.match('_(GET|POST)\)', tanzen[no]):
                                        tag="$"+tanzen[no]
                                        print "se trata de un metodo, por lo tanto es inseguro"
                                        print tag
                for tal in range(len(hier)):
                        if nie !=0 or tag !=0:
                        	if re.match(nie+"(\.).*?"+hier[tal], line) or re.match(tag+"(\.).*?"+hier[tal], line):
                                	print "se aplica de manera correcta la transformada"
                                        filter=11
                                        if re.match(hier[tal]+"(\.).*?"+hier[tal], line):
                                      		print "se aplica de manera correcta la transformada"
                                              	filter=11
        if len(natur) == 1:
		tanzen=natur[0].split("$")
                for no in range(len(tanzen)):
                        if re.match('[a-zA-Z0-9]+', tanzen[no]):
                                ist="$"+tanzen[no]
                                hier.append(ist)
                        elif re.match('_(GET|POST)\[.*\]', tanzen[no]):
                                nie="$"+tanzen[no]
                                filter=19
                                print "se trata de un metodo, por lo tanto es inseguro"
                        elif re.match('_(GET|POST)\)', tanzen[no]):
                                tag="$"+tanzen[no]
                                print "se trata de un metodo, por lo tanto es inseguro"
                                print tag
                                filter=19
        if flag == 1: 
                for vez in range(len(hier)):
                        with open(file,"r") as f:
                                for num, line in enumerate(f,1):
                                                for say in range(len(hier)):
							essen=hier[say].split(")")
							print hier
                                                        if re.match(essen[0],line):
                                                                schone=line.split("=")
                                                                erf=schone[1].split(".")
                                                                if len(erf) > 2:
									for si in range(len(erf)):
                                                                                tanzen=natur[si].split("$")
                                                                                for no in range(len(tanzen)):
                                                                                        if re.match('[a-zA-Z0-9]+', tanzen[no]):
                                                                                                ist="$"+tanzen[no]
                                                                                                hier.append(ist)
                                                                                        elif re.match('_(GET|POST)\[.*\]', tanzen[no]):
                                                                                                nie="$"+tanzen[no]
                                                                                                print "se trata de un metodo, por lo tanto es inseguro"
                                                                                        elif re.match('_(GET|POST)\)', tanzen[no]):
                                                                                                tag="$"+tanzen[no]
                                                                                                print "se trata de un metodo, por lo tanto es inseguro"
                                                                        for tal in range(len(hier)):
										if nie !=0 or tag !=0:
                                                                                	if re.match(nie+"(\.).*?"+hier[tal], line) or re.match(tag+"(\.).*?"+hier[tal], line):
                                                                                        	print "se aplica de manera correcta la transformada"
                                                                                        	filter=11
										if (re.match(hier[tal]+"(\.).*?"+hier[tal], line)):
												print "se aplica de manera correcta la transformada"
                                                                                                filter=11
                                                                else:
                                                                        filter=19
                                                                        print "no se aplica de manera correcta la transformada"
        print file
        return filter

														
def get_vulnerability (option):
        relist=[]
	cont=[]
	fv=[]
	fvfiv=[]
	vul=[]
	tablev=[]
        vulx = " "
	yh=0
        global vulnes
        lnum = 0
        fileslist=files.get_listfiles() #it gets list of the paths
        expression=[]
        connection= sqlite3.connect("/opt/mrphpanalyzer/base/Fraudatanalyzer.db")
        cursor= connection.cursor()
        for e in cursor.execute("SELECT  expression FROM vulnerabilities WHERE name = '%s'" %option): #it gets regular expression  and it adds it into list "expression"  
        	c=list(e)
                expression.append(c[0])
	for x in range(len(expression)):
		e= re.compile(expression[x],re.I) 
		relist.append(e) # it adds objects of the operation re.compile into list relist 
	for file in fileslist:
                with open(file,"r") as f:
                	for num, line in enumerate(f,1):
                        	line = line.strip()
                                if re.match(r'^\s*$', line): continue #If line is empty, continue with the next one
                                if line[0] == '#': continue
				#if re.search(r'<.*?>',line): continue
                                if re.match(r'^(\/\*(\s*|.*?))|((\s*|.*?)\*\/)|(\/\/.*)$',line): continue
                                for r in range(len(relist)):
                                	if relist[r].search(line): #if regular expression maches with line, it adds expression, line and file into diferent lists
                                                if option is "2":
							yh=get_xss(line, file, relist[r].pattern)
                                                if option is "3":
                                                        yh=get_sc(line, file, relist[r].pattern)
                                                if option is "4":
                                                        yh=get_send(line, file, relist[r].pattern)
                                                if option is "7":
                                                        yh=get_ci(line, file, relist[r].pattern)
                                                if option is "8":
                                                        yh=get_ifc(line, file, relist[r].pattern)
                                                if (option != "2") and (option != "7") and (option != "8") and (option != "3") and (option != "4"):
                                                        yh = 19  
                                                if yh is 19:
							lnum = lnum+1						
							fv.append(line+"/n.n"+file)
        	                                	tablev.append(relist[r].pattern)
                                                	vulx += '<tr>\n'
                                                	vulx += '<td>'+str(num)+'</td>\n'   
                                                	vulx += '<td>'+file+'</td>\n'   
                                                	vulx += '<td>'+line.replace("'<"," ")+'</td>\n</tr>'    
        vulnes[option]=lnum #it saves every value of each vulnerability
        tvul = ""
        tvul+='<div class="row">\n'
        tvul+='  <div class="col-xl-5 col-sm-6 mb-3">\n'
        tvul+='    <div class="card text-white sqli o-hidden h-100" id="'+option+'" onclick="id'+option+'()">\n'
        tvul+='       <div class="card-body">\n'
        tvul+='          <div class="row">\n'
        tvul+='              <div class="col-md-4">\n'
        tvul+='                 <h2 style="text-align:center;">'+str(lnum)+'</h2>\n'
        tvul+='              </div>\n'
        tvul+='          <div class="col-md-8">\n'
        if option=="1":
            tvul+='         <h2>SQLi</h2>\n'
        elif option=="2":
            tvul+='         <h2>XSS</h2>\n'
        elif option=="3":
            tvul+='         <h2>SC</h2>\n'
        elif option=="4":
            tvul+='         <h2>Send Info</h2>\n'
        elif option=="5":
            tvul+='         <h2>LFI&RFI</h2>\n'
        elif option=="6":
            tvul+='         <h2>Path Traversal</h2>\n'
        elif option=="7":
            tvul+='         <h2>Command Injection</h2>\n' 
	elif option=="8":
		tvul+='     <h2>Source Code Injection</h2>\n'                                            
        tvul+='          </div>\n'
        tvul+='        </dvi>\n'
        tvul+='     </div>\n'
        tvul+='  </div>\n'
        tvul+='</div>\n'
        tvul+='</div>\n'
        tvul+='</div>\n'
        generateHtml.cardhtml(tvul, generateHtml.creareporte()) #create card for each vulnebility
        generateHtml.tablehtml(vulx,generateHtml.creareporte(), option) #create table for each vulnebility
        generateHtml.scriptable(str(option), generateHtml.creareporte()) #create script for each table vulnebility
        generateHtml.scriptsearchtable(option) #create script for each table vulnebility option search
        if len(vulnes) > 2:
            generateHtml.jsgraphic(vulnes)
	for lf in range(len(fv)): #it pulls apart elements from list in [[line, file],[line,file]]
        	h=fv[lf].split("/n.n")
               	vul.append(h)
	for g in range(len(vul)): #every expression adds to its corresponding element from list "vul" 
               	vul[g].append(tablev[g])
	cursor.close()
	return vul #finally: [[line,file,expression],[line,file,expression],...[line,file,expression]]


