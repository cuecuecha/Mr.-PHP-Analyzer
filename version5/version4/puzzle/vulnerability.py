#!usr/bin/python
# -*- coding: utf-8 -*-

__author__="Coronado Gozain Saine, Hernandez Cuecuecha Jorge Alberto"
__copyright__="Copyright 2017, UNAM-CERT"
__license__="UNAM CERT"
__version__="1.0"
__status__="Prototype"

import re
import files
import sqlite3
import generateHtml

class file_vulnerability:
        pass

def get_vulnerability (option):
        relist=[]
	cont=[]
	fv=[]
	fvfiv=[]
	vul=[]
	tablev=[]
        vulx = " "
        lnum = 0
        fileslist=files.get_listfiles() #get list has path
        expression=[]
        connection= sqlite3.connect("/opt/mrphpanalyzer/base/Fraudatanalyzer.db")
        cursor= connection.cursor()
        for e in cursor.execute("SELECT  expression FROM vulnerabilities WHERE name = '%s'" %option): #it get regular expression from name sent and add to list "expression"  
        	c=list(e)
                expression.append(c[0])
	for x in range(len(expression)):
		e= re.compile(expression[x],re.I) 
		relist.append(e) # it add objects from operation re.compile to list relist 
	for file in fileslist:
                with open(file,"r") as f:
                	for num, line in enumerate(f,1):
                        	line = line.strip()
                                if re.match(r'^\s*$', line): continue #If line is empty, continue with the next one
                                if line[0] == '#': continue
				if re.search(r'<.*?>',line): continue
                                if re.match(r'^(\/\*(\s*|.*?))|((\s*|.*?)\*\/)|(\/\/.*)$',line): continue
                                for r in range(len(relist)):
                                	if relist[r].search(line): #if regular expression to match with line, it add expression, line and file to diferent lists
                                                lnum = lnum+1						
						fv.append(line+"/n.n"+file)
        	                                tablev.append(relist[r].pattern)
                                                vulx += '<tr>\n'
                                                vulx += '<td>'+option+'</td>\n'
                                                vulx += '<td>'+str(num)+'</td>\n'   
                                                vulx += '<td>'+line+'</td>\n'   
                                                vulx += '<td>'+file+'</td>\n</tr>'   
        generateHtml.createhtml(option, lnum, vulx)  

	for lf in range(len(fv)): #it pull apart elements from list in [[line, file],[line,file]]
        	h=fv[lf].split("/n.n")
               	vul.append(h)
	for g in range(len(vul)): #every expression add to its corresponding element from list "vul" 
               	vul[g].append(tablev[g])
	return vul #finally: [[line,file,expression],[line,file,expression],...[line,file,expression]]


